// <auto-generated />
using Ecom.infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecom.infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDBcontext))]
    partial class AppDBcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecom.core.Entities.Product.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "test",
                            Name = "test"
                        });
                });

            modelBuilder.Entity("Ecom.core.Entities.Product.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Newprice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Oldprice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("categroyid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("categroyid");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "test",
                            Name = "test",
                            Newprice = 1000m,
                            Oldprice = 0m,
                            categroyid = 1
                        });
                });

            modelBuilder.Entity("Ecom.core.Entities.Product.photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("productid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("productid");

                    b.ToTable("photo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageName = "test",
                            productid = 1
                        });
                });

            modelBuilder.Entity("Ecom.core.Entities.Product.Product", b =>
                {
                    b.HasOne("Ecom.core.Entities.Product.Category", "Category")
                        .WithMany()
                        .HasForeignKey("categroyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ecom.core.Entities.Product.photo", b =>
                {
                    b.HasOne("Ecom.core.Entities.Product.Product", null)
                        .WithMany("photo")
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecom.core.Entities.Product.Product", b =>
                {
                    b.Navigation("photo");
                });
#pragma warning restore 612, 618
        }
    }
}
